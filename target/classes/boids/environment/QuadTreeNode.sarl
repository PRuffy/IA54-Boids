package boids.environment

import framework.environment.ShapedObject
import framework.math.Rectangle2f
import java.lang.ref.WeakReference
import java.util.LinkedList
import java.util.List
import java.util.ArrayList

class QuadTreeNode<T extends ShapedObject> {
	val box : Rectangle2f
	var objects : LinkedList<T>
	
	val parent : WeakReference<QuadTreeNode<T>>
	var children : List<QuadTreeNode<T>>
	
	new (parent : QuadTreeNode = null, box : Rectangle2f) {
		if (parent !== null) {
			this.parent =new WeakReference(parent)
		}else {
			this.parent = null
		}

		this.box = box
		objects = new LinkedList()
		}

	// Getter
	def getParent() : QuadTreeNode<T> {
		this.parent?.get
	}

	def getBox() : Rectangle2f {
		this.box
	}

	def getObjects : LinkedList<T> {
		this.objects
	}

	def getChildren : List<QuadTreeNode<T>> {
		this.children
	}
	
	// Factory
	def add(o : T) : QuadTreeNode<T> {
		if (children === null) {
			var n : QuadTreeNode<T>
			if (objects.size + 1 <= 10) {
				objects += o
				n = this
			} else {
				createChildren()
				var old = objects
				objects = new LinkedList
				for (obj : old) {
					var x = obj.pushInBranch
					if (x === null) {
						objects += obj
					}
				}
				n = o.pushInBranch
				if (n === null) {
					n = this
					objects += o
				}
			}
			return n
		} else {
			var n = o.pushInBranch
			if (n === null) {
				objects += o
				n = this
			}
			return n
		}
	}

	private def pushInBranch(o : T) : QuadTreeNode<T> {
		var ns = new ArrayList
		for (c : children) {
			if (o.shape.intersects(c.box)) {
				ns += c
			}
		}
		if (ns.size === 1) {
			return ns.get(0).add(o)
		}

		return null
	}

	private def createChildren {
		this.children = new ArrayList(4)
		for (i : 0 .. 3) {
			this.children.add(new QuadTreeNode(this, computeChildBox(i)))
		}
	}

	private def computeChildBox(i : int) : Rectangle2f {
		var center = this.box.center
		switch (i) {
			case 0:
				return new Rectangle2f(this.box.lower, center)
			case 1:
				return new Rectangle2f(center.x, this.box.lower.y, this.box.upper.x, center.y)
			case 2:
				return new Rectangle2f(this.box.lower.x, center.y, center.x, this.box.upper.y)
			case 3:
				return new Rectangle2f(center, this.box.upper)
		}
	}
}