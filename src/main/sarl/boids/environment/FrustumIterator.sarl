package boids.environment

import framework.environment.ShapedObject
import java.util.Iterator
import framework.math.Shape2f
import java.util.Stack
import java.util.LinkedList

class FrustumIterator<T extends ShapedObject> implements Iterator<T> {

	val frustum : Shape2f<?>
	var nextObject : T
	val stack = new Stack<QuadTreeNode<T>>
	val buffer = new LinkedList<T>

	new(tree : QuadTree<T>, fr : Shape2f<?>) {
		this.frustum = fr
		this.stack += tree.root
		searchNext

	}

	override hasNext : boolean {
		nextObject !== null
	}

	override next : T {
		var n = nextObject
		searchNext
		return n
	}

	private def searchNext {
		nextObject = null

		while (buffer.empty && !stack.empty()) {
			var node = stack.pop

			if (frustum.intersects(node.box)) {
				for (c : node.children) {
					stack += c
				}

				for (o : node.objects) {
					if (frustum.intersects(o.shape)) {
						buffer += o
					}
				}
			}
		}

		if (!buffer.empty) {
			nextObject = buffer.removeFirst
		}
	}
}
